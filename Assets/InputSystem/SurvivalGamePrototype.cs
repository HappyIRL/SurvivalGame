//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputSystem/SurvivalGamePrototype.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SurvivalInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SurvivalInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SurvivalGamePrototype"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ad76bc94-337e-45cb-b7fe-723efd923dac"",
            ""actions"": [
                {
                    ""name"": ""MouseButton1"",
                    ""type"": ""Button"",
                    ""id"": ""1eafb3bc-c033-4b3d-98eb-58bccef51052"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""b172c195-ac63-4cf3-94ec-e96edde4ed66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePositionChange"",
                    ""type"": ""Value"",
                    ""id"": ""ac232739-6d6b-4868-8254-c79eb1b4f04d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseButton0"",
                    ""type"": ""Button"",
                    ""id"": ""589ccee4-1854-4a47-9b4f-8bb06591a14c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""286dea23-83cd-4a61-b01b-9357f618edc8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseButton1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03928d13-301e-4d0b-8380-f36a598578c7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c53cfab-200d-4a38-869a-9fc38bcdeac5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MousePositionChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79534e68-5496-4595-941d-8c143603f9af"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.01)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MouseButton0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MouseButton1 = m_Player.FindAction("MouseButton1", throwIfNotFound: true);
        m_Player_Scroll = m_Player.FindAction("Scroll", throwIfNotFound: true);
        m_Player_MousePositionChange = m_Player.FindAction("MousePositionChange", throwIfNotFound: true);
        m_Player_MouseButton0 = m_Player.FindAction("MouseButton0", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MouseButton1;
    private readonly InputAction m_Player_Scroll;
    private readonly InputAction m_Player_MousePositionChange;
    private readonly InputAction m_Player_MouseButton0;
    public struct PlayerActions
    {
        private @SurvivalInputActions m_Wrapper;
        public PlayerActions(@SurvivalInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseButton1 => m_Wrapper.m_Player_MouseButton1;
        public InputAction @Scroll => m_Wrapper.m_Player_Scroll;
        public InputAction @MousePositionChange => m_Wrapper.m_Player_MousePositionChange;
        public InputAction @MouseButton0 => m_Wrapper.m_Player_MouseButton0;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MouseButton1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton1;
                @MouseButton1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton1;
                @MouseButton1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton1;
                @Scroll.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScroll;
                @MousePositionChange.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMousePositionChange;
                @MousePositionChange.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMousePositionChange;
                @MousePositionChange.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMousePositionChange;
                @MouseButton0.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton0;
                @MouseButton0.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton0;
                @MouseButton0.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseButton0;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseButton1.started += instance.OnMouseButton1;
                @MouseButton1.performed += instance.OnMouseButton1;
                @MouseButton1.canceled += instance.OnMouseButton1;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @MousePositionChange.started += instance.OnMousePositionChange;
                @MousePositionChange.performed += instance.OnMousePositionChange;
                @MousePositionChange.canceled += instance.OnMousePositionChange;
                @MouseButton0.started += instance.OnMouseButton0;
                @MouseButton0.performed += instance.OnMouseButton0;
                @MouseButton0.canceled += instance.OnMouseButton0;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMouseButton1(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnMousePositionChange(InputAction.CallbackContext context);
        void OnMouseButton0(InputAction.CallbackContext context);
    }
}
